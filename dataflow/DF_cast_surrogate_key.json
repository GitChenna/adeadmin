{
	"name": "DF_cast_surrogate_key",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Windows_Input",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Surrogate",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "sort2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          employee_id as string,",
				"          first_name as string,",
				"          department_name as string,",
				"          country_id as string,",
				"          salary as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 cast(output(",
				"          employee_id as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 keyGenerate(output(Row_Number as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"derivedColumn1 sort(asc(department_name, true),",
				"     asc(Row_Number, true)) ~> sort1",
				"sort1 sort(asc(Row_Number, true)) ~> sort2",
				"surrogateKey1 filter(department_name=='Executive') ~> filter1",
				"surrogateKey1 derive(UniqueColumn = concat(toString(currentDate()),'_',toString(Row_Number))) ~> derivedColumn1",
				"sort2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          emp_id as string,",
				"          Name as string,",
				"          Salary as string,",
				"          department_name as string,",
				"          country_id as string",
				"     ),",
				"     partitionFileNames:['SurrOuyput.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}