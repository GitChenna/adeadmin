{
	"name": "FuzzyLookup",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fuzzy_Left",
						"type": "DatasetReference"
					},
					"name": "Left"
				},
				{
					"dataset": {
						"referenceName": "fuzzy_Right",
						"type": "DatasetReference"
					},
					"name": "right"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_FuzzyLookup",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Fruits Data} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Left",
				"source(output(",
				"          Fruits as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> right",
				"Left, right join(fuzzyCompare({Fruits Data}, Fruits, 90.00),",
				"     joinType:'inner',",
				"     matchType:'fuzzy',",
				"     ignoreSpaces: false,",
				"     scoreColumn:'Score',",
				"     broadcast: 'off')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          emp_id as string,",
				"          Name as string,",
				"          Salary as string,",
				"          department_name as string,",
				"          country_id as string",
				"     ),",
				"     partitionFileNames:['FuzzyLookup.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}